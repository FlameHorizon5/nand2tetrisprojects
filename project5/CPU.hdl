// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=InstructionMuxOut);
    Not(in=instruction[15], out=NotIns15); // if instruction A
    And(a=instruction[15], b=instruction[5], out=Ins15AndIns5); // if instruction C And d1 
    Or(a=NotIns15, b=Ins15AndIns5, out=LoadA); // if instruction A or instruction C and d1, load A
    ARegister(in=InstructionMuxOut, load=LoadA, out=aRegisterOut, out[0..14]=addressM);
    And(a=instruction[3], b=instruction[15], out=writeM);
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=inMMuxOut);
    And(a=instruction[15], b=instruction[4], out=LoadD); //if instruction C and d2, load D register
    DRegister(in=ALUOut, load=LoadD, out=dRegisterOut);
    
    And(a=instruction[2], b=ngOut, out=jumpIfNegative);
    And(a=instruction[1], b=zrOut, out=jumpIfZero);
    Not(in=zrOut, out=NotZrOut);
    Not(in=ngOut, out=NotNgOut);
    And(a=NotZrOut, b=NotNgOut, out=NotNgNotZrOut);
    And(a=instruction[0], b=NotNgNotZrOut, out=jumpIfPositive);
    Or(a=jumpIfNegative, b=jumpIfZero, out=jumpIfNegOrZero);
    Or(a=jumpIfNegOrZero, b=jumpIfPositive, out=jumpOrs);
    And(a=jumpOrs, b=instruction[15], out=jumpIf);
    ALU(x=dRegisterOut, y=inMMuxOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUOut, zr=zrOut, ng=ngOut);
    Not(in=jumpIf, out=notJumpIf);  //if its not supposed to jump
    Not(in=reset, out=notReset);    //if its not supposed to reset
    And(a=notReset, b=notJumpIf, out=inc); //should increment if neither jump or reset 
    PC(in=aRegisterOut, load=jumpIf, inc=inc, reset=reset, out[0..14]=pc);


	
}